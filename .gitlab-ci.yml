# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages: # List of stages for jobs, and their order of execution
  - npm
  - build
  - lint
  - test
  - deploy

default:
  cache: # Cache modules in between jobs
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .npm/
  retry:
    max: 2
  before_script:
    - cd ./Code/Frontend/REACT-WEBPAGE
    - npm audit fix --force
    - cd ../../Backend/REST-API
    - npm audit fix --force
    - cd ..
    - cd .. 
    - cd ..

npm-frontend-job:
  stage: npm
  image: node:latest
  script:
    - cd ./Code/Frontend/REACT-WEBPAGE
    - npm ci --cache .npm --prefer-offline
  artifacts:
    when: on_success
    expire_in: "30 days"
    paths:
      - "./Code/Frontend/REACT-WEBPAGE/node_modules/*"

npm-backend-job:
  stage: npm
  image: node:latest
  script:
    - cd ./Code/Backend/REST-API
    - npm ci --cache .npm --prefer-offline
  artifacts:
    when: on_success
    expire_in: "30 days"
    paths:
      - "./Code/Backend/REST-API/node_modules/*"


build-frontend-job:
  stage: build
  image: node:latest
  script:
    - cd ./Code/Frontend/REACT-WEBPAGE
    - npm run build
    - echo "Compile complete."
    - echo "Compile complete."

build-backend-job:
  stage: build
  image: node:latest
  script:
    - cd ./Code/Backend/REST-API
    - npm run build
    - echo "Compile complete."
    - echo "Compile complete."

lint-test-frontend-job:
  stage: lint
  image: node:latest
  script:
    - cd ./Code/Frontend/REACT-WEBPAGE
    - npm run lint:pipe
    - echo "Linting complete."

lint-test-backend-job:
  stage: lint
  image: node:latest
  script:
    - cd ./Code/Backend/REST-API
    - npm run lint:pipe
    - echo "Linting complete."

unit-test-frontend-job:
  stage: test
  image: node:latest
  script:
    - cd ./Code/Frontend/REACT-WEBPAGE
    - npm run test:unit
    - echo "Testing complete."

unit-test-backend-job:
  stage: test
  image: node:latest
  script:
    - cd ./Code/Backend/REST-API
    - npm run test:unit
    - echo "Testing complete."

integration-test-frontend-job:
  stage: test
  image: node:latest
  script:
    - cd ./Code/Frontend/REACT-WEBPAGE
    - npm run test:integration
    - echo "Testing complete."

integration-test-backend-job:
  stage: test
  image: node:latest
  script:
    - cd ./Code/Backend/REST-API
    - cat $DB_ENV
    - cat $DB_ENV > .env
    - cat .env
    - npm run test:integration
    - echo "Testing complete."

deploy-job:
  stage: deploy
  environment: production
  before_script:
    - echo "Skip before script"
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
